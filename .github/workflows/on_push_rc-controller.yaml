name: Push to RC Controller
on:
  push:
    branches:
      - 'rc/controller/**'
env:
  MICROFRONT_NAME: controller
jobs:
  pre-release:
    runs-on: ubuntu-latest
    env:
      SKIP_PREFLIGHT_CHECK: true
      GENERATE_SOURCEMAP: false
    outputs:
      new-tag: ${{ env.NEW_TAG }}
      pre-release-branch: ${{ env.PRE_RELEASE_BRANCH }}
      open-pr: ${{ env.DIFFER_FROM_DEV }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
          #ref: ccd9ab63aaa8b0ed5af107c8dbb873c42a6d639e
      - uses: actions/setup-node@v2
        with:
          node-version: '18.20.3'
      - run: git config --global url."https://".insteadOf git://      
      - name: Check latest release, tag and rc/* branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $(gh release list | grep -P "^$MICROFRONT_NAME/\d+\.\d+\.\d+\tPre-release" | wc -l) -ne 0 ]]; then
            PRE_RELEASE_BRANCH=$(gh release list | grep -P "^$MICROFRONT_NAME/\d+\.\d+\.\d+\tPre-release" | awk -F' ' '{print $1}')
            LATEST_PRERELEASE_TAG=$(gh release list | grep -P "^$MICROFRONT_NAME/\d+\.\d+\.\d+\tPre-release" | awk -F' ' '{print $3}')
            LATEST_RELEASE=$(gh release list | grep -P "^$MICROFRONT_NAME/\d+\.\d+\.\d+\trelease" | awk -F' ' '{print $3}')
            echo "Current Pre-release: $LATEST_PRERELEASE_TAG in branch rc/$PRE_RELEASE_BRANCH"

            NEXT_DIGIT=$((LAST_DIGIT=$(echo $LATEST_PRERELEASE_TAG | cut -d 'c' -f 3 | cut -d '.' -f 2)+1))
            echo "NEW_TAG=${PRE_RELEASE_BRANCH}-rc.${NEXT_DIGIT}" >> $GITHUB_ENV   
            echo "LATEST_PRERELEASE_TAG=${LATEST_PRERELEASE_TAG}" >> $GITHUB_ENV
            echo "PRE_RELEASE_BRANCH=${PRE_RELEASE_BRANCH}" >> $GITHUB_ENV
            echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_ENV
            
            commit=$(git log -n 1 origin/rc/${PRE_RELEASE_BRANCH} --pretty=format:"%H" )

            if [[ $(git diff --name-only origin/develop ${commit:0:8} | wc -l) -ne 0 ]]; then
              DIFFER_FROM_DEV='true'
            else
              DIFFER_FROM_DEV='false'
            fi  
            echo "DIFFER_FROM_DEV=${DIFFER_FROM_DEV}" >> $GITHUB_ENV
          else
            echo "There is not an open Pre-release in the current branch"
            exit 1
          fi    
      - name: Initialize mandatory git config
        run: |
          git config --local user.name "jenkinsabraxas"
          git config --local user.email "services@grupoabraxas.com"
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
      - name: Create tag
        run: |
          echo "NEW_TAG: ${{ env.NEW_TAG }}"
          git tag -a ${{ env.NEW_TAG }} -m "Generated by jenkinsabraxas with GA"
          git push --no-verify origin ${{ env.NEW_TAG }}
      - name: Delete Older Release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true 
          tag_name: ${{ env.LATEST_PRERELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.5.0
        with:
          configuration: .github/config/configuration.json
          fromTag: ${{ env.LATEST_RELEASE }}
          toTag: ${{ env.NEW_TAG }}      
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Pre-Release
        id: prerelease
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.PRE_RELEASE_BRANCH }} 
          draft: false
          allowUpdates: true
          updateOnlyUnreleased: true
          generateReleaseNotes: false
          prerelease: true
          tag: ${{ env.NEW_TAG }}    
          body: ${{steps.build_changelog.outputs.changelog}} 
      # - name: Build, tag and push image
      #   env:
      #     DOCKER_REGISTRY: lmartinezs
      #     DOCKER_REPOSITORY: reactapp
      #     GIT_HASH: ${{ env.GIT_HASH }}
      #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      #   run: |
      #     echo "looking for $DOCKER_REPOSITORY:$GIT_HASH"          
      #     repo="$DOCKER_REGISTRY/$DOCKER_REPOSITORY"
      #     token=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$repo:pull" -u "$DOCKER_USERNAME:$DOCKER_PASSWORD" | jq -r '.token')
      #     curl -H "Authorization: Bearer $token" -s "https://registry-1.docker.io/v2/$repo/tags/list"  | jq '.'
      #     IMAGE_META=$(curl -H "Authorization: Bearer $token" -s "https://registry-1.docker.io/v2/$repo/tags/list" | jq '.' | grep "$GIT_HASH-$MICROFRONT_NAME")
          
      #     if [[ ! -z $IMAGE_META ]]; then
      #       echo "$DOCKER_REPOSITORY:$GIT_HASH found"
      #       docker pull $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$GIT_HASH-$MICROFRONT_NAME
      #       docker tag $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$GIT_HASH-$MICROFRONT_NAME $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$PRE_RELEASE-$MICROFRONT_NAME
      #       docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$PRE_RELEASE-$MICROFRONT_NAME
      #     else
      #       TIMESTAMP=$(date +%s)
      #       npm install -g yarn      
      #       yarn install
      #       yarn audit --summary
      #       docker build  -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:${GITHUB_SHA::8}-$TIMESTAMP -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:${GITHUB_SHA::8} -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest .
      #       docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:${GITHUB_SHA::8}
      #       docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
      #     fi  
          
      # - name: Build, tag and push image to Azure ACR
      #   env:
      #     REPOSITORY: lmartinezs
      #     GIT_HASH: ${{ env.GIT_HASH }}
      #     PRE_RELEASE: ${{ env.NEW_TAG }}
      #     REACT_APP_SNOWPLOW_HOST: analytics.arkondata.com
      #     ACR_NAME: arkondata
      #     ACR_REGISTRY: arkondata.azurecr.io
      #     ACR_USER_NAME: "${{ secrets.ACR_USER_NAME }}"
      #     ACR_TOKEN: "${{ secrets.ACR_TOKEN }}"
      #   run: |
      #     echo "looking for $REPOSITORY:$GIT_HASH"
      #     echo $ACR_TOKEN | docker login --username $ACR_USER_NAME --password-stdin $ACR_NAME.azurecr.io
      #     EXIST=$(az acr repository show-tags --name $ACR_NAME --repository $REPOSITORY --username $ACR_USER_NAME --password $ACR_TOKEN --output table | grep $GIT_HASH | wc -l)
      #     if [ $EXIST -gt  0 ]; then
      #       echo "$REPOSITORY:$GIT_HASH found"
      #       docker pull $ACR_REGISTRY/$REPOSITORY:$GIT_HASH
      #       docker tag $ACR_REGISTRY/$REPOSITORY:$GIT_HASH $ACR_REGISTRY/$REPOSITORY:$PRE_RELEASE
      #       docker push $ACR_REGISTRY/$REPOSITORY:$PRE_RELEASE
      #     else      
      #       echo "$REPOSITORY:$GIT_HASH not found"
      #       echo "buildig $REPOSITORY:$PRE_RELEASE"  
      #       yarn build
      #       mv dist/apps/nous build 
      #       docker build -t $ACR_REGISTRY/$REPOSITORY:$GIT_HASH -t $ACR_REGISTRY/$REPOSITORY:$PRE_RELEASE .
      #       docker push $ACR_REGISTRY/$REPOSITORY:$GIT_HASH
      #       docker push $ACR_REGISTRY/$REPOSITORY:$PRE_RELEASE
      #     fi
      # - name: Send notificaion to Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_CHANNEL: arkon-releases
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_MESSAGE: "New pre-release: `${{ env.NEW_TAG }}, ${{ env.GIT_HASH }}` in branch: `rc/${{ env.PRE_RELEASE_BRANCH }}` :rocket:"
      #     SLACK_TITLE: Arkon Nous Front
      #     SLACK_USERNAME: "Pre-Release in microfrontend qa"
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK}}      
  open-pr-to-develop:
    needs: pre-release
    if: needs.pre-release.outputs.open-pr == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create pull request to develop
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          head: rc/${{ needs.pre-release.outputs.pre-release-branch }}
          base: develop
          title: rc/${{ needs.pre-release.outputs.pre-release-branch }} into develop
          reviewers: "lmartinezs"
          body: |            
            This PR was automatically created in order to update the `develop` branch 
            with changes from branch: `${{ needs.pre-release.outputs.pre-release-branch }}` and pre-release: `${{ needs.pre-release.outputs.new-tag }}`
        continue-on-error: true
  open-pr-to-production:
    needs: pre-release
    runs-on: ubuntu-latest
    steps:
      - name: Create pull request to production
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          head: rc/${{ needs.pre-release.outputs.pre-release-branch }}
          base: production
          title: rc/${{ needs.pre-release.outputs.pre-release-branch }}  into production
          reviewers: "Lmartinezs"
          body: |            
            This PR was automatically created 
            in order to release `${{ needs.pre-release.outputs.new-tag }}` 
            and merge `${{ needs.pre-release.outputs.pre-release-branch }}` into production branch
        continue-on-error: true