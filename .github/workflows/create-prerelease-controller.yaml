name: "[controller] Create Pre-Release"
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Hash commit for pre-release'
        required: true        
env:
  MICROFRONT_NAME: controller
jobs:
  check-prerelease:
    runs-on: ubuntu-latest
    outputs:
      pre-release-branch: ${{ env.PRE_RELEASE_BRANCH }}  
      pre-release: ${{ env.PRE_RELEASE }}  
      input-commit: ${{ inputs.commit }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0
        ref: ${{ inputs.commit }}
    - name: Check open pre-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ $(gh release list | grep -P "^${env.MICROFRONT_NAME}/\d+\.\d+\.\d+\tPre-release"  | wc -l) -ne 0 ]]; then
          echo "There is an open Pre-release"
          PRE_RELEASE=current_one
          PRE_RELEASE_BRANCH=rc/$(gh release list | grep -P "^${env.MICROFRONT_NAME}/\d+\.\d+\.\d+\tPre-release" | awk -F' ' '{print $1}')
          echo "PRE_RELEASE_BRANCH=${PRE_RELEASE_BRANCH}" >> $GITHUB_ENV

          LATEST_PRERELEASE_TAG=$(gh release list | grep -P "^${env.MICROFRONT_NAME}/\d+\.\d+\.\d+\tPre-release" | awk -F' ' '{print $3}')
          echo "Current Pre-release: $LATEST_PRERELEASE_TAG in branch $PRE_RELEASE_BRANCH"

        else
          PRE_RELEASE=new_one
        fi
        echo "PRE_RELEASE=$PRE_RELEASE"  >> $GITHUB_ENV
        echo $PRE_RELEASE
  create-new-pre-release:
    needs: check-prerelease   
    if: needs.check-prerelease.outputs.pre-release == 'new_one'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0
        ref: ${{ inputs.commit }}  
    - uses: actions/checkout@v2
      with:
        repository: Grupo-Abraxas/arkon-cc-next-version
        ref: v0.1.5
        token: ${{ secrets.GH_TOKEN }}
        path: .github/actions/my-action
    - name: Get conventional commits next version
      uses: ./.github/actions/my-action
      id: cc
      with:
        project: "."
        directory: "."
        prefix: "v"
    - name: Initialize mandatory git config
      run: |
        git config --local user.name "lmartinezs"
        git config --local user.email "l.santooss@gmail.com"
    - name: Check next version
      run: |
        if [[ ${{ steps.cc.outputs.latest_tag }} = ${{ steps.cc.outputs.calculated_next_version }} ]] ; then
          echo "- No changes"
          exit 1
        fi
        echo "PRE_RELEASE_BRANCH=${{ steps.cc.outputs.calculated_next_version }}" >> $GITHUB_ENV
        echo "NEW_TAG=${{ steps.cc.outputs.calculated_next_version }}-rc.0" >> $GITHUB_ENV
        echo "LATEST_RELEASE=$(gh release list | grep -E 'Latest' | awk -F' ' '{print $3}')" >> $GITHUB_ENV
    - name: Create branch rc
      run: |
        git checkout -b rc/${{ env.PRE_RELEASE_BRANCH }}
        git push -u origin rc/${{ env.PRE_RELEASE_BRANCH }}
    - name: Create tag
      run: |
        git tag -a ${{ env.NEW_TAG }} -m "Generated with GA"
        git push origin ${{ env.NEW_TAG }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0    
        ref: 'rc/${{ env.PRE_RELEASE_BRANCH }}'
    - name: Build Changelog
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v3.5.0
      with:
        configuration: .github/config/configuration.json
        fromTag: ${{ env.LATEST_RELEASE }}
        toTag: ${{ env.NEW_TAG }}      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Pre-Release
      id: prerelease
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.PRE_RELEASE_BRANCH }} 
        draft: false
        allowUpdates: true
        updateOnlyUnreleased: true
        generateReleaseNotes: false
        prerelease: true
        tag: ${{ env.NEW_TAG }}    
        body: ${{steps.build_changelog.outputs.changelog}}  
  push-to-current-pre-release:
    needs: check-prerelease   
    if: needs.check-prerelease.outputs.pre-release == 'current_one'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0
        ref: ${{ needs.check-prerelease.outputs.pre-release-branch }}   
    - name: Initialize mandatory git config
      run: |
        git config --local user.name "lmartinezs"
        git config --local user.email "l.santooss@gmail.com"
    - name: Push to current branch rc/**
      run: |
        git merge ${{ needs.check-prerelease.outputs.input-commit }}
        git push origin ${{ needs.check-prerelease.outputs.pre-release-branch }}